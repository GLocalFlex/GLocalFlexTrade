{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GLocalFlexTrade Public API \u00b6 Public client API for the flexible energy trading market GLocalFlex Market. The client libary provides standard interface to access the GLocalFlex Market public API. The client integrates Rest API and AMPQ protocol for communication with the GLocalFlex server. The GLocalFlex Market documentation is available here GLocalFlex Market Documentation Trade energy or offer flexible loads to the European energy market. Install Python package pip install flxtrd Import in to your trading client import flxtrd Architecture \u00b6 graph LR MyClient --> FlexAPIClient MyClient --> TradingStrategy MyClient --> EnergyManagement MyClient --> CustomPlugins FlexAPIClient --> APIProtocols FlexAPIClient --> FlexPlugins Basic trading client example \u00b6 \"\"\"Example usage of the trading client using AMPQ protocol\"\"\" import signal import sys import time from logging import ERROR , INFO from pprint import pformat from flxtrd import ( ASK , BID , FlexBroker , FlexAPIClient , FlexResource , FlexMarket , MarketOrder , FlexUser , log , utils , ) def main () -> None : GLOCALFLEX_MARKET_URL = \"localhost\" user = FlexUser ( name = \"<your_email>\" , password = \"<your_password>\" , access_token = \"<your_device_access_token>\" , ) market = FlexMarket ( market_url = GLOCALFLEX_MARKET_URL ) # Create a AMPQ client that connects to the message broker trading_client = FlexAPIClient ( base_url = GLOCALFLEX_MARKET_URL , user = user , market = market ) # Define a flexibility resource that will be traded # The resource is a 100W power for 60 minutes starting in 5 minutes flex_resource = FlexResource ( power_w = 100 , start_time_epoch_s = utils . utc_timestamp_s () + utils . min_to_s ( 5 ), duration_min = 60 , order_expiration_min = 50 ) # Create a market ask order to sell flexibility market_order = MarketOrder ( order_type = ASK , price_eur = 100 , resource = flex_resource ) # Send the market order to the message broker # The connection to the broker will be initiated automatically _ , err = trading_client . send_order ( market_order = market_order , verify_ssl = False ) if err : log ( ERROR , err ) # Create a market bid order to buy flexibility market_order = MarketOrder ( order_type = BID , price_eur = 100 , resource = flex_resource ) _ , err = trading_client . send_order ( market_order = market_order , verify_ssl = False ) if err : log ( ERROR , err ); sys . exit ( 1 ) # Check the market responses for closed_deals, price tick messages # from the message broker for 60 seconds and exit wait_sec = 0 expected_responses = 3 log ( INFO , f \"Waiting for messages from market broker\" ) try : while wait_sec < 60 : market_responses = trading_client . check_market_responses () if market_responses is not None : log ( INFO , f \"Received { len ( market_responses ) } responses from market broker\" ) # Close the connection to the market message broker if len ( market_responses ) == expected_responses : break time . sleep ( 1 ) wait_sec += 1 except KeyboardInterrupt : log ( INFO , \"Keyboard interrupt received. Closing connection to the market broker\" ) finally : trading_client . trade_protocol . close_connection () if __name__ == \"__main__\" : main () Basic REST API client example \u00b6 \"\"\"Example usage of the REST API client\"\"\" import signal import sys import time from logging import ERROR , INFO from pprint import pformat from flxtrd import ( ASK , BID , FlexBroker , FlexAPIClient , FlexResource , FlexMarket , MarketOrder , FlexUser , log , utils , ) def main () -> None : GLOCALFLEX_MARKET_URL = \"localhost\" user = FlexUser ( name = \"<your_email>\" , password = \"<your_password>\" , access_token = \"<your_device_access_token>\" ) market = FlexMarket ( market_url = GLOCALFLEX_MARKET_URL ) # Create a AMPQ client that connects to the message broker trading_client = FlexAPIClient ( base_url = GLOCALFLEX_MARKET_URL , user = user , market = market ) # Send a request to the GLocalFlex with REST API response , err = trading_client . make_request ( method = \"POST\" , endpoint = \"/users/login\" , data = { \"email\" : user . name , \"password\" : user . password }, ) if err : log ( ERROR , err ) log ( INFO , pformat ( response . request_response . json ())) log ( INFO , response . request_response . status_code ) if __name__ == \"__main__\" : main ()","title":"Home"},{"location":"#glocalflextrade-public-api","text":"Public client API for the flexible energy trading market GLocalFlex Market. The client libary provides standard interface to access the GLocalFlex Market public API. The client integrates Rest API and AMPQ protocol for communication with the GLocalFlex server. The GLocalFlex Market documentation is available here GLocalFlex Market Documentation Trade energy or offer flexible loads to the European energy market. Install Python package pip install flxtrd Import in to your trading client import flxtrd","title":"GLocalFlexTrade Public API"},{"location":"#architecture","text":"graph LR MyClient --> FlexAPIClient MyClient --> TradingStrategy MyClient --> EnergyManagement MyClient --> CustomPlugins FlexAPIClient --> APIProtocols FlexAPIClient --> FlexPlugins","title":"Architecture"},{"location":"#basic-trading-client-example","text":"\"\"\"Example usage of the trading client using AMPQ protocol\"\"\" import signal import sys import time from logging import ERROR , INFO from pprint import pformat from flxtrd import ( ASK , BID , FlexBroker , FlexAPIClient , FlexResource , FlexMarket , MarketOrder , FlexUser , log , utils , ) def main () -> None : GLOCALFLEX_MARKET_URL = \"localhost\" user = FlexUser ( name = \"<your_email>\" , password = \"<your_password>\" , access_token = \"<your_device_access_token>\" , ) market = FlexMarket ( market_url = GLOCALFLEX_MARKET_URL ) # Create a AMPQ client that connects to the message broker trading_client = FlexAPIClient ( base_url = GLOCALFLEX_MARKET_URL , user = user , market = market ) # Define a flexibility resource that will be traded # The resource is a 100W power for 60 minutes starting in 5 minutes flex_resource = FlexResource ( power_w = 100 , start_time_epoch_s = utils . utc_timestamp_s () + utils . min_to_s ( 5 ), duration_min = 60 , order_expiration_min = 50 ) # Create a market ask order to sell flexibility market_order = MarketOrder ( order_type = ASK , price_eur = 100 , resource = flex_resource ) # Send the market order to the message broker # The connection to the broker will be initiated automatically _ , err = trading_client . send_order ( market_order = market_order , verify_ssl = False ) if err : log ( ERROR , err ) # Create a market bid order to buy flexibility market_order = MarketOrder ( order_type = BID , price_eur = 100 , resource = flex_resource ) _ , err = trading_client . send_order ( market_order = market_order , verify_ssl = False ) if err : log ( ERROR , err ); sys . exit ( 1 ) # Check the market responses for closed_deals, price tick messages # from the message broker for 60 seconds and exit wait_sec = 0 expected_responses = 3 log ( INFO , f \"Waiting for messages from market broker\" ) try : while wait_sec < 60 : market_responses = trading_client . check_market_responses () if market_responses is not None : log ( INFO , f \"Received { len ( market_responses ) } responses from market broker\" ) # Close the connection to the market message broker if len ( market_responses ) == expected_responses : break time . sleep ( 1 ) wait_sec += 1 except KeyboardInterrupt : log ( INFO , \"Keyboard interrupt received. Closing connection to the market broker\" ) finally : trading_client . trade_protocol . close_connection () if __name__ == \"__main__\" : main ()","title":"Basic trading client example"},{"location":"#basic-rest-api-client-example","text":"\"\"\"Example usage of the REST API client\"\"\" import signal import sys import time from logging import ERROR , INFO from pprint import pformat from flxtrd import ( ASK , BID , FlexBroker , FlexAPIClient , FlexResource , FlexMarket , MarketOrder , FlexUser , log , utils , ) def main () -> None : GLOCALFLEX_MARKET_URL = \"localhost\" user = FlexUser ( name = \"<your_email>\" , password = \"<your_password>\" , access_token = \"<your_device_access_token>\" ) market = FlexMarket ( market_url = GLOCALFLEX_MARKET_URL ) # Create a AMPQ client that connects to the message broker trading_client = FlexAPIClient ( base_url = GLOCALFLEX_MARKET_URL , user = user , market = market ) # Send a request to the GLocalFlex with REST API response , err = trading_client . make_request ( method = \"POST\" , endpoint = \"/users/login\" , data = { \"email\" : user . name , \"password\" : user . password }, ) if err : log ( ERROR , err ) log ( INFO , pformat ( response . request_response . json ())) log ( INFO , response . request_response . status_code ) if __name__ == \"__main__\" : main ()","title":"Basic REST API client example"},{"location":"dev/","text":"Development \u00b6 export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring","title":"Development"},{"location":"dev/#development","text":"export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring","title":"Development"},{"location":"mermaid/","text":"graph LR Institution_A --> Patient_Dataset_A Institution_A --> ModelParameter ModelParameter --> CentralServer Institution_B --> Patient_Dataset_B Institution_B --> ModelParameter graph LR GLocalFlexTrade --> ClientAPILibary ClientAPILibary --> Marketplace GLocalFlexMarket --> Marketplace graph LR Monitoring --> www.glocalflexmarket.com CICD --> www.glocalflexmarket.com www.glocalflexmarket.com --> production graph LR Production --> www.glocalflexmarket.com Monitoring --> www.glocalflexmarket.com CICD --> www.glocalflexmarket.com graph LR Monitoring --> sandbox.glocalflexmarket.com Test --> sandbox.glocalflexmarket.com graph LR MyClient --> FlexAPIClient FlexAPIClient --> APIProtocols FlexAPIClient --> FlexPlugins graph LR Production --> www.glocalflexmarket.com Monitoring --> www.glocalflexmarket.com CICD --> www.glocalflexmarket.com Classes relationship \u00b6 classDiagram class MyClient { + make_request(endpoint: str, params: dict, data: dict): APIResponse, err } class FlexAPIClient { - api: BaseApi + api.send_request(endpoint: str, params: dict, data: dict): APIResponse, err } class Protocol { + send_request(endpoint: str, params: dict, data: dict): Response } class BaseAPI { + send_request(endpoint: str, params: dict, data: dict): Any } class Plugin { + before_request(endpoint: str, params: dict, data: dict) + after_request(response: Any) } class FlexAPIResponse { + response: Any + plugin_data: dict } FlexAPIClient --> Protocol MyClient --> FlexAPIClient Protocol --> BaseAPI FlexAPIClient --> Plugin APIResponse","title":"Diagrams"},{"location":"mermaid/#classes-relationship","text":"classDiagram class MyClient { + make_request(endpoint: str, params: dict, data: dict): APIResponse, err } class FlexAPIClient { - api: BaseApi + api.send_request(endpoint: str, params: dict, data: dict): APIResponse, err } class Protocol { + send_request(endpoint: str, params: dict, data: dict): Response } class BaseAPI { + send_request(endpoint: str, params: dict, data: dict): Any } class Plugin { + before_request(endpoint: str, params: dict, data: dict) + after_request(response: Any) } class FlexAPIResponse { + response: Any + plugin_data: dict } FlexAPIClient --> Protocol MyClient --> FlexAPIClient Protocol --> BaseAPI FlexAPIClient --> Plugin APIResponse","title":"Classes relationship"}]}