{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GLocalFlexTrade Public API \u00b6 Public client API for the flexible energy trading market GLocalFlex Market. The client libary provides standard interface to access the GLocalFlex Market public API. The client integrates Rest API and AMPQ protocol for communication with the GLocalFlex server. The GLocalFlex Market documentation is available here GLocalFlex Market Documentation Trade energy or offer flexible loads to the European energy market. Install Python package pip install flxtrd Import in to your trading client import flxtrd You can use a sample trading client from the command line for testing python -m flxtrd --help Basic Example \u00b6 import sys from flxtrd import FlexAPIClient from flxtrd import AuthPlugin , ListDevices from flxtrd import User # Example usage of the client library GFLEX_API_URL = \"localhost\" def main (): user = User ( name = \"\" , password = \"\" ) client = FlexAPIClient ( user = user , base_url = GFLEX_API_URL ) response , err = client . make_request ( method = \"POST\" , endpoint = \"/users/login\" , data = { \"email\" : user . name , \"password\" : user . password }) if err : print ( err ) sys . exit ( 1 ) print ( response . request_response . json ()) print ( response . request_response . status_code ) if __name__ == \"__main__\" : main () Architecture \u00b6 graph LR FlexAPIClient --> Protocol MyAPIClient --> FlexAPIClient APIClient --> Plugin MyAPIClient --> Plugin APIClient --> APIResponse Classes relationship \u00b6 classDiagram class APIClient { + make_request(endpoint: str, params: dict, data: dict): APIResponse } class MyAPIClient { + make_request(endpoint: str, params: dict, data: dict): APIResponse } class Protocol { + send_request(endpoint: str, params: dict, data: dict): Any } class RestAPI { + send_request(endpoint: str, params: dict, data: dict): Any } class AmpqAPI { + send_request(endpoint: str, params: dict, data: dict): Any } class Plugin { + before_request(endpoint: str, params: dict, data: dict) + after_request(response: Any) } class APIResponse { + response: Any + plugin_data: dict } APIClient --> Protocol MyAPIClient --> APIClient RestAPI --> Protocol AmpqAPI --> Protocol APIClient --> Plugin MyAPIClient --> Plugin APIClient --> APIResponse","title":"Home"},{"location":"#glocalflextrade-public-api","text":"Public client API for the flexible energy trading market GLocalFlex Market. The client libary provides standard interface to access the GLocalFlex Market public API. The client integrates Rest API and AMPQ protocol for communication with the GLocalFlex server. The GLocalFlex Market documentation is available here GLocalFlex Market Documentation Trade energy or offer flexible loads to the European energy market. Install Python package pip install flxtrd Import in to your trading client import flxtrd You can use a sample trading client from the command line for testing python -m flxtrd --help","title":"GLocalFlexTrade Public API"},{"location":"#basic-example","text":"import sys from flxtrd import FlexAPIClient from flxtrd import AuthPlugin , ListDevices from flxtrd import User # Example usage of the client library GFLEX_API_URL = \"localhost\" def main (): user = User ( name = \"\" , password = \"\" ) client = FlexAPIClient ( user = user , base_url = GFLEX_API_URL ) response , err = client . make_request ( method = \"POST\" , endpoint = \"/users/login\" , data = { \"email\" : user . name , \"password\" : user . password }) if err : print ( err ) sys . exit ( 1 ) print ( response . request_response . json ()) print ( response . request_response . status_code ) if __name__ == \"__main__\" : main ()","title":"Basic Example"},{"location":"#architecture","text":"graph LR FlexAPIClient --> Protocol MyAPIClient --> FlexAPIClient APIClient --> Plugin MyAPIClient --> Plugin APIClient --> APIResponse","title":"Architecture"},{"location":"#classes-relationship","text":"classDiagram class APIClient { + make_request(endpoint: str, params: dict, data: dict): APIResponse } class MyAPIClient { + make_request(endpoint: str, params: dict, data: dict): APIResponse } class Protocol { + send_request(endpoint: str, params: dict, data: dict): Any } class RestAPI { + send_request(endpoint: str, params: dict, data: dict): Any } class AmpqAPI { + send_request(endpoint: str, params: dict, data: dict): Any } class Plugin { + before_request(endpoint: str, params: dict, data: dict) + after_request(response: Any) } class APIResponse { + response: Any + plugin_data: dict } APIClient --> Protocol MyAPIClient --> APIClient RestAPI --> Protocol AmpqAPI --> Protocol APIClient --> Plugin MyAPIClient --> Plugin APIClient --> APIResponse","title":"Classes relationship"}]}